/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>

/*
 * Temporarily here because nice nano v2 spi is not defined on ZMK Yet
 * Source: https://github.com/zmkfirmware/zmk/blob/main/app/boards/shields/reviung41/boards/nice_nano.overlay
 * GitHub Issue: https://github.com/zmkfirmware/zmk/issues/885
 */

#include <dt-bindings/led/led.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

&pinctrl {
    spi3_default: spi3_default {
        group1 {
            psels = <NRF_PSEL(SPIM_MOSI, 0, 8)>;
        };
    };

    spi3_sleep: spi3_sleep {
        group1 {
            psels = <NRF_PSEL(SPIM_MOSI, 0, 8)>;
            low-power-enable;
        };
    };
};

&spi3 {
    compatible = "nordic,nrf-spim";
    status = "okay";
    pinctrl-0 = <&spi3_default>;
    pinctrl-1 = <&spi3_sleep>;
    pinctrl-names = "default", "sleep";

    led_strip: ws2812@0 {
        compatible = "worldsemi,ws2812-spi";
        label = "WS2812";

        /* SPI */

        reg = <0>; /* ignored, but necessary for SPI bindings */
        spi-max-frequency = <4000000>;

        /* WS2812 */

        chain-length = <30>;
        spi-one-frame = <0x70>;
        spi-zero-frame = <0x40>;
        color-mapping = <LED_COLOR_ID_GREEN LED_COLOR_ID_RED LED_COLOR_ID_BLUE>;
    };
};

/ {
    chosen {
        zmk,underglow = &led_strip;
    };
};

/* END temporary RGB support section */

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------------
            // |  `    |  1  |  2  |  3   |  4   |  5   |                         |  6   |  7    |  8    |  9   |   0   |       |
            // |  ESC  |  Q  |  W  |  E   |  R   |  T   |                         |  Y   |  U    |  I    |  O   |   P   | BKSPC |
            // |  TAB  |  A  |  S  |  D   |  F   |  G   |                         |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |  MUTE  |        | ExtPw |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //               | GUI | ALT  | CTRL | LOWER|  ENTER |        | SPACE | RAISE| CTRL  | ALT   | GUI  |

            bindings = <
&kp ESCAPE  &kp N1  &kp N2        &kp N3        &kp N4     &kp N5                                &kp N6    &kp N7     &kp N8        &kp N9    &kp N0    &kp DELETE
&kp TAB     &kp Q   &kp W         &kp E         &kp R      &kp T                                 &kp Y     &kp U      &kp I         &kp O     &kp P     &kp APOS
&kp CAPS    &kp A   &kp S         &kp D         &kp F      &kp G                                 &kp H     &kp J      &kp K         &kp L     &kp SEMI  &kp ENTER
&kp LSHFT   &kp Z   &kp X         &kp C         &kp V      &kp B   &kp HOME       &kp F5         &kp N     &kp M      &kp COMMA     &kp DOT   &kp FSLH  &kp RSHFT
                    &kp LEFT_ALT  &kp LEFT_WIN  &kp LCTRL  &mo 2   &lt 1 SPACE    &kp BACKSPACE  &kp LEFT  &kp RIGHT  &kp UP_ARROW  &kp DOWN
            >;

            sensor-bindings =
                <&inc_dec_kp C_AC_SCROLL_DOWN C_AC_SCROLL_UP>,
                <&inc_dec_kp PAGE_DOWN PAGE_UP>;
        };

        lower_layer {
            // TODO: Some binds are waiting for shifted keycode support.
            // ------------------------------------------------------------------------------------------------------------
            // |       |  F1 |  F2 |  F3  |  F4  |  F5  |                   |  F6  |  F7   |  F8   |  F9  |  F10  |  F11  |
            // | `     |   1 |   2 |   3  |   4  |   5  |                   |   6  |   7   |   8   |   9  |    0  |  F12  |
            // |       |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   |   |
            // |       |  =  |  -  |  +   |  {   |  }   |        |  |       |  [   |  ]    |  ;    |  :   |   \   |       |
            //               |     |      |      |      |        |  |       |      |       |       |      |

            bindings = <
&kp GRAVE  &kp F1          &kp F2            &kp F3       &kp F4     &kp F5                                     &kp F6          &kp F7    &kp F8           &kp F9     &kp F10   &kp F11
&trans     &kp LS(LG(S))   &kp LC(X)         &kp LC(C)    &kp LC(V)  &bt BT_SEL 4                               &bt BT_CLR      &kp N7    &kp N8           &kp N9     &kp N0    &kp F12
&trans     &kp C_PREVIOUS  &kp C_PLAY_PAUSE  &kp C_NEXT   &kp ENTER  &kp DELETE                                 &kp CARET       &kp AMPS  &kp KP_MULTIPLY  &kp LPAR   &kp RPAR  &kp PIPE
&trans     &kp EQUAL       &kp MINUS         &kp KP_PLUS  &kp LBRC   &kp RBRC      &kp K_MUTE    &kp K_MUTE     &kp LBKT        &kp RBKT  &kp UP_ARROW     &kp COLON  &kp BSLH  &trans
                           &trans            &trans       &trans     &trans        &trans        &kp C_AC_COPY  &kp C_AC_PASTE  &kp LEFT  &kp DOWN         &kp RIGHT
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_UP C_VOL_DN>,
                <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        raise_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |BTCLR| BT1  | BT2  |  BT3  |  BT4  |  BT5 |                 |      |      |       |      |       |       |
            // |     | INS  | PSCR | GUI   |       |      |                 | PGUP |      |   ^   |      |       |       |
            // |     | ALT  | CTRL | SHIFT |       | CAPS |                 | PGDN |   <- |   v   |  ->  |  DEL  | BKSPC |
            // |     | UNDO | CUT  | COPY  | PASTE |      |      |   | RGB  |      |      |       |      |       |       |
            //              |      |       |       |      |      |   |      |      |      |       |      |

            bindings = <
&bt BT_CLR  &bt BT_SEL 0     &bt BT_SEL 1            &bt BT_SEL 2      &bt BT_SEL 3       &bt BT_SEL 4                             &trans     &trans    &trans    &trans     &trans   &trans
&trans      &kp INS          &kp LS(LG(LEFT_ARROW))  &kp LG(UP_ARROW)  &kp LS(LG(RIGHT))  &trans                                   &kp PG_UP  &trans    &kp UP    &trans     &kp N0   &trans
&trans      &kp LA(LS(TAB))  &kp LG(LEFT_ARROW)      &kp LG(DOWN)      &kp LG(RIGHT)      &kp LA(TAB)                              &kp PG_DN  &kp LEFT  &kp DOWN  &kp RIGHT  &kp DEL  &kp BSPC
&trans      &kp K_UNDO       &kp K_CUT               &kp K_COPY        &kp K_PASTE        &trans        &trans    &rgb_ug RGB_TOG  &trans     &trans    &trans    &trans     &trans   &trans
                             &trans                  &trans            &trans             &trans        &trans    &trans           &trans     &trans    &trans    &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };
    };
};
